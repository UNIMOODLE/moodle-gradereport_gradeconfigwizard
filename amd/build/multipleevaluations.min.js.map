{"version":3,"file":"multipleevaluations.min.js","sources":["../src/multipleevaluations.js"],"sourcesContent":["/// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n// Project implemented by the &quot;Recovery, Transformation and Resilience Plan.\n// Funded by the European Union - Next GenerationEU&quot;.\n//\n// Produced by the UNIMOODLE University Group: Universities of\n// Valladolid, Complutense de Madrid, UPV/EHU, León, Salamanca,\n// Illes Balears, Valencia, Rey Juan Carlos, La Laguna, Zaragoza, Málaga,\n// Córdoba, Extremadura, Vigo, Las Palmas de Gran Canaria y Burgos.\n/*\n * Display information about all the gradereport_gradeconfigwizard modules in the requested course. *\n * @package gradeconfigwizard\n * @copyright 2023 Proyecto UNIMOODLE\n * @author UNIMOODLE Group (Coordinator) &lt;direccion.area.estrategia.digital@uva.es&gt;\n * @author Joan Carbassa (IThinkUPC) &lt;joan.carbassa@ithinkupc.com&gt;\n * @author Yerai Rodríguez (IThinkUPC) &lt;yerai.rodriguez@ithinkupc.com&gt;\n * @author Marc Geremias (IThinkUPC) &lt;marc.geremias@ithinkupc.com&gt;\n * @author Miguel Gutiérrez (UPCnet) &lt;miguel.gutierrez.jariod@upcnet.es&gt;\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n*/\n\nimport $ from 'jquery';\nimport {get_string as getString} from 'core/str';\nimport {get_strings as getStrings} from 'core/str';\n\n/* START: VARIABLES */\n\nlet multipleevaluationtable = document.getElementById('multipleevaluation-table');\nlet multipleevaluationtablebody = multipleevaluationtable.getElementsByTagName('tbody')[0];\n\nlet addcategorybtn = document.getElementById('multipleevaluations-category-create-btn');\n\nlet gradeitemsmodal = document.querySelector('#available-gradeitems-modal-id');\nlet gradeitemsmodalacceptbutton = gradeitemsmodal.querySelector('.confirm');\n\nlet saveandexitbutton = document.getElementsByClassName('saveandexit')[0];\n\n/* END: VARIABLES */\n\n/* START: TEMPLATES */\nconst removeitemiconhtml = (randomid) => `\n<i class=\"fa fa-fw fa-trash-o icon remove-item-icon\" data-randomid=\"${randomid}\"\ntitle=\"Remove element\" role=\"img\" aria-label=\"Remove element\"></i>\n`;\n\nconst categoryNameInput = (randomid, categoryname) => `\n${categoryname}\n<input name=\"categories[${randomid}][name]\" type=\"hidden\" value=\"${categoryname}\"/>\n`;\n\nconst newcategoryextracellshtml = (randomid, str) => `\n<td class=\"weight-1\" rowspan=\"2\">\n  <input type=\"number\" name=\"categories[${randomid}][weight]\" size=\"2\" value=\"1\">\n</td>\n<td class=\"min-grade-1\" rowspan=\"2\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <input type=\"checkbox\" class=\"mr-2\" id=\"myCheckbox\" disabled>\n      <input type=\"number\" name=\"categories[${randomid}][recitem][recitemgrade]\" size=\"2\" disabled>\n    </div>\n  </td>\n  </div>\n<td class=\"resit-1 add-btn\" rowspan=\"2\">\n  <button type=\"button\"\n    class=\"add-resit-items-btn btn btn-secondary\"\n    data-toggle=\"modal\"\n    data-target=\"#available-gradeitems-modal-id\"\n    data-gradeitemaddtarget=\"categoryresititem\"\n    data-addgradeitemdepth=\"1\" disabled>\n      ${str}\n  </button>\n</td>\n`;\n\nconst addcategoryelementsbuttonrowhtml = (randomid, str) => `\n<tr data-randomid=\"${randomid}\" data-rowtype=\"categorygradeitemaddbtn\" data-depthlevel=\"2\">\n  <td class=\"item\">\n    <button type=\"button\"\n      data-toggle=\"modal\"\n      data-target=\"#available-gradeitems-modal-id\"\n      data-gradeitemaddtarget=\"gradeitem\"\n      data-addgradeitemdepth=\"2\"\n      class=\"add-category-items-btn btn btn-secondary\">\n        ${str}\n    </button>\n  </td>\n  <td class=\"weight-2\"></td>\n  <td class=\"min-grade-2\"></td>\n  <td class=\"resit-2\"></td>\n</tr>\n`;\n\nconst categorygradeitemrowhtml = (randomid, gradeitemid, gradeitemname, str) => `\n<tr data-randomid=\"${randomid}\" data-rowtype=\"categorygradeitem\" data-gradeitemid=\"${gradeitemid}\" data-depthlevel=\"2\">\n  <td class=\"item\"\n    data-gradeitemid=\"${gradeitemid}\"\n    data-gradeitemname=\"${gradeitemname}\"\n    >\n      ${gradeitemname}\n      <input name=\"categories[${randomid}][items][${gradeitemid}][id]\" type=\"hidden\" value=\"${gradeitemid}\" />\n      <i class=\"fa fa-fw fa-trash-o icon remove-item-icon\" data-randomid=\"${randomid}\" data-gradeitemid=\"${gradeitemid}\"\n      title=\"Remove element\" role=\"img\" aria-label=\"Remove element\"></i>\n  </td>\n  <td class=\"weight-2\">\n    <input type=\"number\" name=\"categories[${randomid}][items][${gradeitemid}][weight]\" size=\"2\" value=\"1\" />\n  </td>\n  <td class=\"min-grade-2\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <input type=\"checkbox\" class=\"mr-2\">\n        <input name=\"categories[${randomid}][items][${gradeitemid}][recitem][recitemgrade]\" type=\"number\" size=\"2\" disabled>\n      </div>\n    </div>\n  </td>\n  <td class=\"resit-2 add-btn\" data-gradeitemid=\"${gradeitemid}\">\n    <button type=\"button\"\n      class=\"add-grade-item-resit-items-btn btn btn-secondary\"\n      data-gradeitemaddtarget=\"gradeitemresititem\"\n      data-toggle=\"modal\"\n      data-target=\"#available-gradeitems-modal-id\"\n      disabled>\n        ${str}\n    </button>\n  </td>\n</tr>\n`;\n\nconst categoryresitgradeitemcellhtml = (randomid, gradeitemid, gradeitemname, rowspan) => `\n<td class=\"resit-1\" rowspan=\"${rowspan}\" data-gradeitemid=\"${gradeitemid}\" data-gradeitemname=\"${gradeitemname}\">\n  ${gradeitemname}\n  <input name=\"categories[${randomid}][recitem][recitemid]\" type=\"hidden\" value=\"${gradeitemid}\"/>\n  <i class=\"fa fa-fw fa-trash-o icon remove-item-icon\" title=\"Remove element\" role=\"img\" aria-label=\"Remove element\"></i>\n</td>\n`;\n\nconst categorygradeitemresitgradeitemcellhtml = (randomid, gradeitemid, gradeitemname, parentgradeitemid) => `\n<td class=\"resit-2\" data-gradeitemid=\"${gradeitemid}\" data-gradeitemname=\"${gradeitemname}\">\n  ${gradeitemname}\n  <input name=\"categories[${randomid}][items][${parentgradeitemid}][recitem][recitemid]\" type=\"hidden\" value=\"${gradeitemid}\" />\n  <i class=\"fa fa-fw fa-trash-o icon remove-item-icon\" title=\"Remove element\" role=\"img\" aria-label=\"Remove element\"></i>\n</td>\n`;\n\nconst addcategoryresitbuttoncellenabledhtml = (randomid, str) => `\n<td class=\"resit-1 add-btn\" rowspan=\"2\" id=\"categoryresitbutton-${randomid}\">\n  <button type=\"button\"\n    class=\"add-resit-items-btn btn btn-secondary\"\n    data-toggle=\"modal\"\n    data-target=\"#available-gradeitems-modal-id\"\n    data-gradeitemaddtarget=\"categoryresititem\"\n    data-addgradeitemdepth=\"1\">\n      ${str}\n  </button>\n</td>\n`;\n\nconst addcategorygradeitemresitgradeitembuttoncelldisabledhtml = (gradeitemid, str) => `\n<td class=\"resit-2 add-btn\" data-gradeitemid=\"${gradeitemid}\">\n  <button type=\"button\"\n    class=\"add-grade-item-resit-items-btn btn btn-secondary\"\n    data-gradeitemaddtarget=\"gradeitemresititem\"\n    data-toggle=\"modal\"\n    data-target=\"#available-gradeitems-modal-id\" disabled>\n      ${str}\n  </button>\n</td>\n`;\n\n/* END: TEMPLATES */\n\n/* START: FUNCTIONS */\n\nconst generateUniqueId = () => {\n    let randomid = null;\n    while (randomid === null || document.getElementById(randomid) !== null) {\n        // generate a 8 chars long random id\n        randomid = Math.random().toString(36).substring(2, 10);\n    }\n    return randomid;\n};\n\nconst getGradeitemsmodalSelectedItems = () => {\n    let gradeitems = gradeitemsmodal.querySelectorAll('input[type=\"checkbox\"]:checked:not(.d-none)');\n    return gradeitems;\n};\n\nconst removeGradeitemsmodalItems = (gradeitems) => {\n    gradeitems.forEach((gradeitem) => {\n        gradeitem.closest('div').classList.add('d-none');\n        gradeitem.checked = false;\n    });\n};\n\nconst addGradeitemsmodalItem = (gradeitemid) => {\n    let gradeitem = gradeitemsmodal.querySelector('[data-id=\"' + gradeitemid + '\"]');\n    gradeitem.closest('div').classList.remove('d-none');\n    gradeitem.checked = false;\n};\n\nconst recalculateRowspans = (randomid) => {\n    let categoryCount = 1;\n    let categoryGradeItemAddBtnCount = multipleevaluationtablebody.querySelectorAll(\n        '[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitemaddbtn\"]'\n    ).length;\n    let categoryGradeItemCount = multipleevaluationtablebody.querySelectorAll(\n        '[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitem\"]'\n    ).length;\n    var totalItemCount = categoryGradeItemAddBtnCount + categoryGradeItemCount + categoryCount;\n    multipleevaluationtablebody.querySelectorAll(\n        '[data-randomid=\"' + randomid + '\"][data-rowtype=\"category\"] td'\n    ).forEach(datacell => {\n        datacell.rowSpan = totalItemCount;\n    });\n};\nconst addCategory = async (categoryname) => {\n    let randomid = generateUniqueId();\n\n    let newcategoryrow = document.createElement('tr');\n    newcategoryrow.id = randomid;\n    newcategoryrow.dataset.randomid = randomid;\n    newcategoryrow.dataset.depthlevel = 1;\n    newcategoryrow.dataset.rowtype = \"category\";\n\n    let newcategorycell = document.createElement('td');\n    newcategorycell.classList.add('category');\n    newcategorycell.rowSpan = 2;\n    newcategorycell.innerHTML = categoryNameInput(randomid, categoryname) + removeitemiconhtml(randomid); //not needed\n\n    newcategoryrow.appendChild(newcategorycell);\n    await getStrings([\n        {'key': 'addelement1', component: 'gradereport_gradeconfigwizard'},\n        {'key': 'addelement2', component: 'gradereport_gradeconfigwizard'},\n    ]).then(function (str) {\n        newcategoryrow.innerHTML += newcategoryextracellshtml(randomid, str[0]);\n        multipleevaluationtablebody.appendChild(newcategoryrow);\n        newcategoryrow.insertAdjacentHTML('afterend', addcategoryelementsbuttonrowhtml(randomid, str[1]));\n    });\n\n\n    let removeitemicon = newcategoryrow.querySelector('.remove-item-icon');\n    removeitemicon.addEventListener('click', removeCategoryCallback);\n\n    let categorymingradecheckbox = newcategoryrow.querySelector('.min-grade-1 input[type=\"checkbox\"]');\n    categorymingradecheckbox.addEventListener('change', categoryMinGradeCheckboxChangeCallback);\n\n    let categorymingradetext = newcategoryrow.querySelector('.min-grade-1 input[type=\"number\"]');\n    categorymingradetext.addEventListener('input', categoryMinGradeTextChangeCallback);\n\n    // In case new category is added, enable save and exit button\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst removeCategory = (randomid) => {\n    removeCategoryResititem(randomid);\n\n    let catgorygradeitemrowstodelete = multipleevaluationtablebody.querySelectorAll(\n        'tr[data-rowtype=\"categorygradeitem\"][data-randomid=\"' + randomid + '\"]'\n    );\n    catgorygradeitemrowstodelete.forEach(catgorygradeitemrow => {\n        let randomid = catgorygradeitemrow.dataset['randomid'];\n        let gradeitemid = catgorygradeitemrow.dataset['gradeitemid'];\n        removeCategoryGradeitem(randomid, gradeitemid);\n    });\n\n    let categoryrowstodelete = multipleevaluationtablebody.querySelectorAll('tr[data-randomid=\"' + randomid + '\"]');\n    categoryrowstodelete.forEach(row => row.remove());\n\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst addCategoryGradeitems = (randomid, gradeitems) => {\n    gradeitems.forEach(gradeitem => {\n        addCategoryGradeitem(randomid, gradeitem);\n    });\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst addCategoryGradeitem = async (randomid, gradeitem) => {\n    let gradeitemid = gradeitem.dataset['id'];\n    let gradeitemname = gradeitem.dataset['displayname'];\n    let categorygradeitemaddbtn = multipleevaluationtablebody.querySelectorAll(\n        '[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitemaddbtn\"]'\n    );\n    await getString('addelement3', 'gradereport_gradeconfigwizard')\n        .then(function (str) {\n        categorygradeitemaddbtn[0].insertAdjacentHTML('beforebegin',\n            categorygradeitemrowhtml(randomid, gradeitemid, gradeitemname, str));\n    });\n\n    let newcategorygradeitemrow = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitem\"][data-gradeitemid=\"' + gradeitemid + '\"]'\n    );\n\n    let removeitemicon = newcategorygradeitemrow.querySelector('.remove-item-icon');\n    removeitemicon.addEventListener('click', removeCategoryGradeItemCallback);\n\n    let categorygradeitemmingradecheckbox = newcategorygradeitemrow.querySelector('.min-grade-2 input[type=\"checkbox\"]');\n    categorygradeitemmingradecheckbox.addEventListener('change', categoryGradeitemMinGradeCheckboxChangeCallback);\n\n    let categorygradeitemmingradetext = newcategorygradeitemrow.querySelector('.min-grade-2 input[type=\"number\"]');\n    categorygradeitemmingradetext.addEventListener('input', categoryGradeitemMinGradeTextChangeCallback);\n\n    let categorymingradecheckbox = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"category\"] .min-grade-1 input[type=\"checkbox\"]'\n    );\n    categorymingradecheckbox.disabled = false;\n\n    recalculateRowspans(randomid);\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst removeCategoryGradeitem = (randomid, gradeitemid) => {\n    let rowtodelete = multipleevaluationtablebody.querySelectorAll(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitem\"][data-gradeitemid=\"' + gradeitemid + '\"]'\n    );\n    rowtodelete.forEach(row => {\n        row.querySelectorAll('[data-gradeitemid]').forEach(row => addGradeitemsmodalItem(row.dataset['gradeitemid']));\n        row.remove();\n    });\n\n    let categorygradeitems = multipleevaluationtablebody.querySelectorAll(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitem\"]'\n    );\n    let categorymingradecheckbox = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"category\"] .min-grade-1 input[type=\"checkbox\"]'\n    );\n    if (categorygradeitems.length > 0) {\n        categorymingradecheckbox.disabled = false;\n    } else {\n        categorymingradecheckbox.disabled = true;\n    }\n\n    addGradeitemsmodalItem(gradeitemid);\n    recalculateRowspans(randomid);\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst addCategoryresititem = (randomid, gradeitem) => {\n    let gradeitemid = gradeitem.dataset['id'];\n    let gradeitemname = gradeitem.dataset['displayname'];\n    let categoryresitcell = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"category\"] td.resit-1'\n    );\n    let rowspan = categoryresitcell.getAttribute('rowspan');\n\n    let categoryresitgradeitemaddbtn = multipleevaluationtablebody.querySelector(\n        '[data-randomid=\"' + randomid + '\"] td.resit-1 .add-resit-items-btn'\n    );\n    let categoryresitgradeitemcell = categoryresitgradeitemaddbtn.closest('td');\n    categoryresitgradeitemcell.insertAdjacentHTML('beforebegin',\n        categoryresitgradeitemcellhtml(randomid, gradeitemid, gradeitemname, rowspan))\n    ;\n    categoryresitgradeitemcell.remove();\n\n    let newcategoryresitgradeitem = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"category\"] td.resit-1[data-gradeitemid=\"' + gradeitemid + '\"]'\n    );\n    newcategoryresitgradeitem.querySelector('.remove-item-icon').addEventListener('click', removeCategoryResitGradeitemCallback);\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst removeCategoryResititem = async (randomid, gradeitemid = null) => {\n    let categoryresitgradeitem = null;\n    if (gradeitemid === null) {\n        categoryresitgradeitem = multipleevaluationtablebody.querySelector('tr[data-randomid=\"' + randomid + '\"] td.resit-1');\n        gradeitemid = categoryresitgradeitem.dataset['gradeitemid'];\n    } else {\n        categoryresitgradeitem = multipleevaluationtablebody.querySelector(\n            'tr[data-randomid=\"' + randomid + '\"] td.resit-1[data-gradeitemid=\"' + gradeitemid + '\"]'\n        );\n    }\n    let categoryresitgradeitemcell = categoryresitgradeitem.closest('td');\n    await getString('addelement4', 'gradereport_gradeconfigwizard')\n        .then(function (str) {\n        categoryresitgradeitemcell.insertAdjacentHTML('afterend', addcategoryresitbuttoncellenabledhtml(randomid, str));\n        categoryresitgradeitemcell.remove();\n    });\n\n    if (gradeitemid !== undefined) {\n        addGradeitemsmodalItem(gradeitemid);\n    }\n    recalculateRowspans(randomid);\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst disableAddCategoryResititmeBtn = (randomid) => {\n    let addcategoryresititmebtn = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"] td.resit-1.add-btn button'\n    );\n    if (addcategoryresititmebtn) {\n        addcategoryresititmebtn.disabled = true;\n    }\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst addCategoryGradeitemResititem = (randomid, parentgradeitem, gradeitem) => {\n    let gradeitemid = gradeitem.dataset['id'];\n    let gradeitemname = gradeitem.dataset['displayname'];\n\n    let categorygradeitemresitgradeitemaddbtn = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"] td[data-gradeitemid=\"' +\n        parentgradeitem + '\"] ~ td.resit-2 .add-grade-item-resit-items-btn'\n    );\n    let categorygradeitemresitgradeitemcell = categorygradeitemresitgradeitemaddbtn.closest('td');\n    categorygradeitemresitgradeitemcell.insertAdjacentHTML('beforebegin',\n        categorygradeitemresitgradeitemcellhtml(randomid, gradeitemid, gradeitemname, parentgradeitem));\n    categorygradeitemresitgradeitemcell.remove();\n\n    let newcategorygradeitemresitgradeitem = multipleevaluationtablebody.querySelector(\n        'tr[data-randomid=\"' + randomid + '\"][data-rowtype=\"categorygradeitem\"] td.resit-2[data-gradeitemid=\"' + gradeitemid + '\"]'\n    );\n    newcategorygradeitemresitgradeitem.querySelector('.remove-item-icon')\n        .addEventListener('click', removeCategoryGradeitemResitGradeitemCallback);\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst removeCategoryGradeitemResititem = async (randomid, parentgradeitemid, gradeitemid) => {\n    let categoryresitgradeitemcell = multipleevaluationtablebody.querySelector(\n        'td.resit-2[data-gradeitemid=\"' + gradeitemid + '\"]'\n    );\n    if (!categoryresitgradeitemcell) {\n        return;\n    }\n    await getString('addelement5', 'gradereport_gradeconfigwizard')\n        .then(function (str) {\n        categoryresitgradeitemcell.insertAdjacentHTML('afterend',\n            addcategorygradeitemresitgradeitembuttoncelldisabledhtml(parentgradeitemid, str));\n        categoryresitgradeitemcell.remove();\n    });\n\n    //TODO: esto está hecho porque hasta que no se define un item de recuperación,\n    // el botón para añadir uno tiene el id del itemgrade al que irá asociado\n    if (parentgradeitemid != gradeitemid) {\n        addGradeitemsmodalItem(gradeitemid);\n    }\n    recalculateRowspans(randomid);\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst disableAddCategoryGradeitemResititemBtn = (randomid, gradeitemid) => {\n    let addcategorygradeitemresititembtnselector = 'tr[data-randomid=\"' + randomid + '\"]';\n    addcategorygradeitemresititembtnselector += ' [data-rowtype=\"categorygradeitem\"][data-gradeitemid=\"' + gradeitemid + '\"]';\n    addcategorygradeitemresititembtnselector += ' td.resit-2.add-btn button.add-grade-item-resit-items-btn';\n    let addcategorygradeitemresititembtn = multipleevaluationtablebody.querySelector(addcategorygradeitemresititembtnselector);\n    if (addcategorygradeitemresititembtn) {\n        addcategorygradeitemresititembtn.disabled = true;\n    }\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst refreshButtonsEnabledOrDisabled = () => {\n    refreshAddCategoryGradeitemResititemBtn();\n    refreshSaveButtonEnabledOrDisabled();\n};\n\nconst refreshAddCategoryGradeitemResititemBtn = () => {\n    const addcategorygradeitemresititembuttons = multipleevaluationtable.querySelectorAll('.add-grade-item-resit-items-btn');\n    addcategorygradeitemresititembuttons.forEach(addcategorygradeitemresititembutton => {\n        if (checkAddCategoryGradeitemResititemBtnShouldBeEnabled(addcategorygradeitemresititembutton)) {\n            addcategorygradeitemresititembutton.disabled = false;\n        } else {\n            addcategorygradeitemresititembutton.disabled = true;\n        }\n    });\n};\n\nconst refreshSaveButtonEnabledOrDisabled = () => {\n    if (checkSaveButtonShouldBeEnabled()) {\n        saveandexitbutton.disabled = false;\n        if(saveandexitbutton.classList.contains('disabled-box')){\n            saveandexitbutton.classList.remove('disabled-box');\n        }\n    } else {\n        saveandexitbutton.disabled = true;\n        if(!saveandexitbutton.classList.contains('disabled-box')){\n            saveandexitbutton.classList.add('disabled-box');\n        }\n    }\n};\n\nconst checkAddCategoryGradeitemResititemBtnShouldBeEnabled = (addcategorygradeitemresititembutton) => {\n    const categorygradeitemrow = addcategorygradeitemresititembutton.closest('tr');\n    const categorymingradeinput = categorygradeitemrow.querySelector('.min-grade-2 input[type=\"number\"]');\n\n    if (categorymingradeinput.value === '') {\n        return false;\n    }\n    return true;\n};\n\nconst checkSaveButtonShouldBeEnabled = () => {\n    // If there are pending resit items to add\n    if (document.querySelector('.resit-2.add-btn button:not([disabled])')) {\n        return false;\n    }\n\n    // If there are no categories left, disable save and exit button\n    let categorycount = multipleevaluationtablebody.querySelectorAll('tr[data-rowtype=\"category\"]').length;\n    if (categorycount < 1) {\n        return false;\n    }\n\n    return true;\n};\n\n/* END: FUNCTIONS */\n\n/* START: CALLBACKS */\n\nconst addCategoryButtonClickCallback = () => {\n    let categorynameinput = document.getElementById('multipleevaluations-category-create-name');\n    categorynameinput.value = categorynameinput.value.trim();\n    let categoryname = categorynameinput.value;\n    if (categoryname === '') {\n        return;\n    }\n    addCategory(categoryname);\n    categorynameinput.value = '';\n};\n\nconst removeCategoryCallback = (event) => {\n    let randomid = event.target.dataset.randomid;\n    removeCategory(randomid);\n};\n\nconst removeCategoryGradeItemCallback = (event) => {\n    let randomid = event.target.dataset.randomid;\n    let gradeitemid = event.target.dataset.gradeitemid;\n    removeCategoryGradeitem(randomid, gradeitemid);\n};\n\nconst removeCategoryResitGradeitemCallback = (event) => {\n    let parenttd = event.target.closest('td');\n    let parenttr = parenttd.closest('tr');\n    let randomid = parenttr.dataset['randomid'];\n    let gradeitemid = parenttd.dataset['gradeitemid'];\n    removeCategoryResititem(randomid, gradeitemid);\n};\n\nconst removeCategoryGradeitemResitGradeitemCallback = (event) => {\n    let parenttd = event.target.closest('td');\n    let parenttr = parenttd.closest('tr');\n    let randomid = parenttr.dataset['randomid'];\n    let gradeitemid = parenttd.dataset['gradeitemid'];\n    let parentgradeitemid = parenttr.querySelector('td.item').dataset['gradeitemid'];\n    removeCategoryGradeitemResititem(randomid, parentgradeitemid, gradeitemid);\n};\n\nconst availableGradeItemsModalShowCallback = (event) => {\n    let button = event.relatedTarget;\n    let callerrandomid = button.closest('tr').dataset['randomid'];\n    let gradeitemaddtarget = button.dataset['gradeitemaddtarget'];\n    let addgradeitemdepth = button.dataset['addgradeitemdepth'];\n    let gradeitemid = button.closest('td').dataset['gradeitemid'];\n\n    gradeitemsmodal.dataset['gradeitemaddtarget'] = gradeitemaddtarget;\n    gradeitemsmodal.dataset['addgradeitemdepth'] = addgradeitemdepth;\n    gradeitemsmodal.dataset['callerrandomid'] = callerrandomid;\n    gradeitemsmodal.dataset['gradeitemid'] = gradeitemid;\n};\n\nconst availableGradeItemsModalConfirmCallback = () => {\n    let gradeitemaddtarget = gradeitemsmodal.dataset['gradeitemaddtarget'];\n    let gradeitemid = gradeitemsmodal.dataset['gradeitemid'];\n\n    let randomid = gradeitemsmodal.dataset['callerrandomid'];\n    let gradeitems = getGradeitemsmodalSelectedItems();\n\n    switch (gradeitemaddtarget) {\n        case 'gradeitem':\n            addCategoryGradeitems(randomid, gradeitems);\n            removeGradeitemsmodalItems(gradeitems);\n            $(gradeitemsmodal).modal('hide');\n            break;\n        case 'categoryresititem':\n            if (gradeitems.length > 1) {\n                alert('Selecciona solo 1 gradeitem');\n                break;\n            }\n            addCategoryresititem(randomid, gradeitems[0]);\n            removeGradeitemsmodalItems(gradeitems);\n            $(gradeitemsmodal).modal('hide');\n            break;\n        case 'gradeitemresititem':\n            if (gradeitems.length > 1) {\n                alert('Selecciona solo 1 gradeitem');\n                break;\n            }\n            addCategoryGradeitemResititem(randomid, gradeitemid, gradeitems[0]);\n            removeGradeitemsmodalItems(gradeitems);\n            $(gradeitemsmodal).modal('hide');\n            break;\n    }\n};\n\nconst categoryMinGradeCheckboxChangeCallback = (event) => {\n    let categorymingradecheckbox = event.target;\n    let categorymingradecheckboxrow = categorymingradecheckbox.closest('tr');\n    let randomid = categorymingradecheckboxrow.dataset['randomid'];\n\n    let categoryresititemid = categorymingradecheckboxrow.querySelector('.resit-1').dataset['gradeitemid'];\n    if (categoryresititemid) {\n        removeCategoryResititem(randomid, categoryresititemid);\n        disableAddCategoryResititmeBtn(randomid);\n    }\n\n    let categorymingradeinput = categorymingradecheckboxrow.querySelector('.min-grade-1 input[type=\"number\"]');\n    if (categorymingradecheckbox.checked) {\n        categorymingradeinput.disabled = false;\n    } else {\n        categorymingradeinput.disabled = true;\n        categorymingradeinput.value = '';\n    }\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst categoryGradeitemMinGradeCheckboxChangeCallback = async (event) => {\n    let categorymingradecheckbox = event.target;\n    let categorygradeitemchangedrow = categorymingradecheckbox.closest('tr');\n    let randomid = categorygradeitemchangedrow.dataset['randomid'];\n\n    let parentgradeitemid = categorygradeitemchangedrow.querySelector('td.item').dataset['gradeitemid'];\n    let resitgradeitemid = categorygradeitemchangedrow.querySelector('td.resit-2').dataset['gradeitemid'];\n    let isresitbuttonwithnoresititem = categorygradeitemchangedrow.querySelector('td.resit-2').classList.contains('add-btn');\n    if (resitgradeitemid !== null && parentgradeitemid !== null && !isresitbuttonwithnoresititem) {\n        await removeCategoryGradeitemResititem(randomid, parentgradeitemid, resitgradeitemid);\n    }\n\n    let categorymingradeinput = categorygradeitemchangedrow.querySelector('.min-grade-2 input[type=\"number\"]');\n\n    if (categorymingradecheckbox.checked) {\n        categorymingradeinput.disabled = false;\n    } else {\n        categorymingradeinput.disabled = true;\n        categorymingradeinput.value = '';\n        let addCategoryGradeitemResititemBtn = categorygradeitemchangedrow.querySelector('.resit-2 button');\n        addCategoryGradeitemResititemBtn.disabled = true;\n        disableAddCategoryGradeitemResititemBtn(randomid, parentgradeitemid);\n    }\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst categoryMinGradeTextChangeCallback = (event) => {\n    let mingradetextfield = event.target;\n    let mingradetextfieldrow = mingradetextfield.closest('tr');\n\n    let addCategoryGradeitemResititemBtn = mingradetextfieldrow.querySelector('.resit-1 button');\n\n    if (mingradetextfield.value.trim() === '') {\n        addCategoryGradeitemResititemBtn.disabled = true;\n    } else {\n        addCategoryGradeitemResititemBtn.disabled = false;\n    }\n    refreshButtonsEnabledOrDisabled();\n};\n\nconst categoryGradeitemMinGradeTextChangeCallback = (event) => {\n    let mingradetextfield = event.target;\n    let mingradetextfieldrow = mingradetextfield.closest('tr');\n\n    let addCategoryGradeitemResititemBtn = mingradetextfieldrow.querySelector('.resit-2 button');\n\n    if (mingradetextfield.value.trim() === '') {\n        addCategoryGradeitemResititemBtn.disabled = true;\n    } else {\n        addCategoryGradeitemResititemBtn.disabled = false;\n    }\n    refreshButtonsEnabledOrDisabled();\n};\n\n/* END: CALLBACKS */\n\n/* START: EVENT LISTENERS DECLARATION */\n\nexport const init = () => {\n    addcategorybtn.addEventListener('click', addCategoryButtonClickCallback);\n    $(gradeitemsmodal).on('show.bs.modal', availableGradeItemsModalShowCallback);\n    gradeitemsmodalacceptbutton.addEventListener('click', availableGradeItemsModalConfirmCallback);\n};\n\n/* END: EVENT LISTENERS DECLARATION */\n"],"names":["multipleevaluationtable","document","getElementById","multipleevaluationtablebody","getElementsByTagName","addcategorybtn","gradeitemsmodal","querySelector","gradeitemsmodalacceptbutton","saveandexitbutton","getElementsByClassName","addcategoryresitbuttoncellenabledhtml","randomid","str","removeGradeitemsmodalItems","gradeitems","forEach","gradeitem","closest","classList","add","checked","addGradeitemsmodalItem","gradeitemid","remove","recalculateRowspans","totalItemCount","querySelectorAll","length","datacell","rowSpan","addCategory","async","Math","random","toString","substring","generateUniqueId","newcategoryrow","createElement","id","dataset","depthlevel","rowtype","newcategorycell","innerHTML","categoryname","categoryNameInput","removeitemiconhtml","appendChild","component","then","newcategoryextracellshtml","insertAdjacentHTML","addcategoryelementsbuttonrowhtml","addEventListener","removeCategoryCallback","categoryMinGradeCheckboxChangeCallback","categoryMinGradeTextChangeCallback","refreshButtonsEnabledOrDisabled","addCategoryGradeitem","gradeitemname","categorygradeitemaddbtn","categorygradeitemrowhtml","newcategorygradeitemrow","removeCategoryGradeItemCallback","categoryGradeitemMinGradeCheckboxChangeCallback","categoryGradeitemMinGradeTextChangeCallback","disabled","removeCategoryGradeitem","row","categorygradeitems","categorymingradecheckbox","removeCategoryResititem","categoryresitgradeitem","categoryresitgradeitemcell","undefined","removeCategoryGradeitemResititem","parentgradeitemid","addcategorygradeitemresitgradeitembuttoncelldisabledhtml","refreshAddCategoryGradeitemResititemBtn","refreshSaveButtonEnabledOrDisabled","addcategorygradeitemresititembutton","checkAddCategoryGradeitemResititemBtnShouldBeEnabled","checkSaveButtonShouldBeEnabled","contains","value","addCategoryButtonClickCallback","categorynameinput","trim","event","catgorygradeitemrow","removeCategory","target","removeCategoryResitGradeitemCallback","parenttd","removeCategoryGradeitemResitGradeitemCallback","parenttr","availableGradeItemsModalShowCallback","button","relatedTarget","callerrandomid","gradeitemaddtarget","addgradeitemdepth","availableGradeItemsModalConfirmCallback","addCategoryGradeitems","modal","alert","rowspan","getAttribute","categoryresitgradeitemcellhtml","addCategoryresititem","parentgradeitem","categorygradeitemresitgradeitemcell","categorygradeitemresitgradeitemcellhtml","addCategoryGradeitemResititem","categorymingradecheckboxrow","categoryresititemid","addcategoryresititmebtn","disableAddCategoryResititmeBtn","categorymingradeinput","categorygradeitemchangedrow","resitgradeitemid","isresitbuttonwithnoresititem","addcategorygradeitemresititembtnselector","addcategorygradeitemresititembtn","disableAddCategoryGradeitemResititemBtn","mingradetextfield","addCategoryGradeitemResititemBtn","on"],"mappings":"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"}